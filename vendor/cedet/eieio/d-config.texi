@c -*-texinfo-*-
@c
@c $Id: d-config.texi,v 1.3 1997/01/21 01:12:48 zappo Exp $
@c

@c The next line is for the back-search to see what node this one
@c resides in.

@c @node Special Classes,
@c @section Special Classes

@c This command is a convenience to help rebuild this file.  Use C-x C-e
@c on the expression below to rebuild the entire widget index (but only
@c after loading in the dialog tool.)

@c (eieiodoc-class data-object "do" '(data-object))

@menu
*  data-object-symbol ::
*   data-object-symbol-translated ::
*   data-object-symbol-string-to-int ::
*   data-object-symbol-list-index ::
*   data-object-symbol-lisp-expression ::
*   data-object-symbol-default ::
*   data-object-symbol-feature ::
*   data-object-symbol-hook ::
*   data-object-symbol-disabled ::
*  data-object-command-option ::
*  data-face-object ::
*   data-face-foreground-object ::
*   data-face-background-object ::
*   data-face-underline-object ::
*   data-face-emphasis-object ::
*  data-symbol ::
@end menu


@node data-object-symbol, data-object-symbol-translated,  , Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-symbol
@doindex data-object-symbol

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item data-object-symbol
@table @asis
@item Children:
@w{@xref{data-object-symbol-translated}}, @w{@xref{data-object-symbol-string-to-int}}, @w{@xref{data-object-symbol-list-index}}, @w{@xref{data-object-symbol-lisp-expression}}, @w{@xref{data-object-symbol-default}}, @w{@xref{data-object-symbol-feature}}, @w{@xref{data-object-symbol-hook}}, @w{@xref{data-object-symbol-disabled}}
@end table

@end table

@end table
@end table

  This is a type of @code{data-object} @xref{data-object} which will initialize itself to the
value stored in the @code{symbol} field, and which will also (optionally)
save its value back into @code{symbol} when the user edits it.

@table @asis
@item Private Slots:

@table @code
@item :symbol
Default Value: @code{nil}

Symbol whose value changes in parallel to @code{:value}
@refill

@item :protect
Default Value: @code{nil}

@code{t} if this symbol is not to be saved into a file
@refill

@end table

@end table

@node data-object-symbol-translated, data-object-symbol-string-to-int, data-object-symbol, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-symbol-translated
@doindex data-object-symbol-translated

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-object-symbol}}
@table @code
@item data-object-symbol-translated
No children
@end table

@end table

@end table
@end table

  This is a type of @code{data-object-symbol} @xref{data-object-symbol} which allows the creator to
make specialized translators. This would permit any data not currently
defined to be specified.

@table @asis
@item Public Slots:

@table @code
@item :set-lambda
Default Value: @code{nil}

This is a lambda expression to use on the data 
value to translate it from the rendered() version to the internally
stored version. (lambda (newvalue) ...) and returns value to
store. See @dfn{dlg-string-to-list} as an example.
@refill

@item :get-lambda
Default Value: @code{nil}

This is the lambda expression to use on the
data whenever it's value is gotten.  When the value is rendered,
@code{get-lambda} is run, and then translated to a string.  (lambda (outvalue) ...)
See @dfn{dlg-list-to-string} as an example.
@refill

@end table

@end table

@node data-object-symbol-string-to-int, data-object-symbol-list-index, data-object-symbol-translated, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-symbol-string-to-int
@doindex data-object-symbol-string-to-int

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-object-symbol}}
@table @code
@item data-object-symbol-string-to-int
No children
@end table

@end table

@end table
@end table

  This data object assumes that @code{symbol} will be a number.  The
string it maintains will be translated back into a number whenever it
is set back into @code{symbol}

@table @asis
@item Private Slots:

@table @code
@item :float-p
Default Value: @code{nil}

@code{t} when this object allows floating point numbers, 
@code{nil} indicates that only whole numbers are allowed
@refill

@end table

@end table

@node data-object-symbol-list-index, data-object-symbol-lisp-expression, data-object-symbol-string-to-int, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-symbol-list-index
@doindex data-object-symbol-list-index

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-object-symbol}}
@table @code
@item data-object-symbol-list-index
No children
@end table

@end table

@end table
@end table

  This type of object will also maintain its value as a number in the
variable associated with the symbol field.  The symbol will be
assigned a value from this string list while the @code{value} slot
maintains a number.

@table @asis
@item Private Slots:

@table @code
@item :string-list
Default Value: @code{nil}

List into which @code{value} indexes.
@refill

@end table

@end table

@node data-object-symbol-lisp-expression, data-object-symbol-default, data-object-symbol-list-index, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-symbol-lisp-expression
@doindex data-object-symbol-lisp-expression

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-object-symbol}}
@table @code
@item data-object-symbol-lisp-expression
No children
@end table

@end table

@end table
@end table

  This type of object will maintain its value as an expression in the
variable associated with the symbol field while @code{value} remains as a
string.  @dfn{read} us used to translate the string, and @code{symbol} will not
be changed if the read fails.

@table @asis
@end table

@node data-object-symbol-default, data-object-symbol-feature, data-object-symbol-lisp-expression, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-symbol-default
@doindex data-object-symbol-default

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-object-symbol}}
@table @code
@item data-object-symbol-default
No children
@end table

@end table

@end table
@end table

  This type of object uses set-default for the given symbol instead
of set as used by @code{data-object-symbol} @xref{data-object-symbol}

@table @asis
@end table

@node data-object-symbol-feature, data-object-symbol-hook, data-object-symbol-default, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-symbol-feature
@doindex data-object-symbol-feature

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-object-symbol}}
@table @code
@item data-object-symbol-feature
No children
@end table

@end table

@end table
@end table

  This type of object uses require / unload-feature for the given
symbol.  Some features turn themselves on automatically, which is why
@code{:unload-commands} are needed to turn them off.

@table @asis
@item Private Slots:

@table @code
@item :unload-commands
Default Value: @code{nil}

Some packages may need additional unloading commands run.
Initialize this to be a string with the necessary commands needed to
turn the feature off before it is unloaded.
@refill

@end table

@end table

@node data-object-symbol-hook, data-object-symbol-disabled, data-object-symbol-feature, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-symbol-hook
@doindex data-object-symbol-hook

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-object-symbol}}
@table @code
@item data-object-symbol-hook
No children
@end table

@end table

@end table
@end table

  This type of object uses add/remove-hook for the given symbol

@table @asis
@item Private Slots:

@table @code
@item :command
Default Value: @code{nil}

A string representing a command to install in a hook.
The hook value us interpreted by @dfn{read} before installation.
@refill

@end table

@end table

@node data-object-symbol-disabled, data-object-command-option, data-object-symbol-hook, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-symbol-disabled
@doindex data-object-symbol-disabled

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-object-symbol}}
@table @code
@item data-object-symbol-disabled
No children
@end table

@end table

@end table
@end table

  This type of object uses (put ... @code{'disabled} ...) for the given
symbol so that emacs will warn the user before they use it.

@table @asis
@end table

@node data-object-command-option, data-face-object, data-object-symbol-disabled, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-object-command-option
@doindex data-object-command-option

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item data-object-command-option
No children
@end table

@end table
@end table

  This type of object will optionally add a command to a .emacs
file.  It will also run the command to turn a given feature on or off.

@table @asis
@item Private Slots:

@table @code
@item :command
Default Value: @code{nil}

A string representing a command to execute in a .emacs file.
This command is interpreted by @dfn{read}, then @dfn{eval}uated in the running
environment.
@refill

@item :disable-command
Default Value: @code{nil}

A string which allows @code{command} to be undone.
@refill

@item :protect
Default Value: @code{nil}

Some symbols you never want to write to a file.
@refill

@end table

@end table

@node data-face-object, data-face-foreground-object, data-object-command-option, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-face-object
@doindex data-face-object

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item data-face-object
@table @asis
@item Children:
@w{@xref{data-face-foreground-object}}, @w{@xref{data-face-background-object}}, @w{@xref{data-face-underline-object}}, @w{@xref{data-face-emphasis-object}}
@end table

@end table

@end table
@end table

  Takes a standard @code{data-object} @xref{data-object}, and modifies it to be able to
maintain a face.  Has nothing special about it, and should not be
instantiated.  Use children of this class to modify specific features
of a face.

@table @asis
@item Private Slots:

@table @code
@item :face
Default Value: @code{nil}

The face this data object maintains
@refill

@end table

@end table

@node data-face-foreground-object, data-face-background-object, data-face-object, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-face-foreground-object
@doindex data-face-foreground-object

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-face-object}}
@table @code
@item data-face-foreground-object
No children
@end table

@end table

@end table
@end table

  @code{data-face-object} @xref{data-face-object} which maintains the foreground

@table @asis
@end table

@node data-face-background-object, data-face-underline-object, data-face-foreground-object, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-face-background-object
@doindex data-face-background-object

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-face-object}}
@table @code
@item data-face-background-object
No children
@end table

@end table

@end table
@end table

  @code{data-face-object} @xref{data-face-object} which maintains the background

@table @asis
@end table

@node data-face-underline-object, data-face-emphasis-object, data-face-background-object, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-face-underline-object
@doindex data-face-underline-object

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-face-object}}
@table @code
@item data-face-underline-object
No children
@end table

@end table

@end table
@end table

  @code{data-face-object} @xref{data-face-object} which maintains current underline state

@table @asis
@end table

@node data-face-emphasis-object, data-symbol, data-face-underline-object, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-face-emphasis-object
@doindex data-face-emphasis-object

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item @w{@xref{data-face-object}}
@table @code
@item data-face-emphasis-object
No children
@end table

@end table

@end table
@end table

  @code{data-face-object} @xref{data-face-object} which maintains current emphasis state. (bold & italic combos)

@table @asis
@end table

@node data-symbol,  , data-face-emphasis-object, Special Classes
@comment  node-name,  next,  previous,  up
@subsection data-symbol
@doindex data-symbol

@table @asis
@item Inheritance Tree:
@table @code
@item @w{@xref{data-object}}
@table @code
@item data-symbol
No children
@end table

@end table
@end table

  This is a type of @code{data-object} @xref{data-object} which will initialize itself to the
value stored in the @code{symbol} field, and which will also (optionally)
save its value back into @code{symbol} when the user edits it.

@table @asis
@item Private Slots:

@table @code
@item :symbol
Default Value: @code{nil}

Symbol whose value changes in parallel to @code{:value}
@refill

@item :protect
Default Value: @code{nil}

@code{t} if this symbol is not to be saved into a file
@refill

@end table

@end table
