\input texinfo   @c -*-texinfo-*-
@c
@c $Id: dialog.texi,v 1.6 1997/10/10 01:37:09 zappo Exp $
@c
@setfilename dialog.info
@settitle Dialog widget control for emacs

@ifinfo
@format
START-INFO-DIR-ENTRY
* Dialog: (dialog).       Dialog controls for emacs
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@titlepage
@sp 10
@center @titlefont{Dialog Mode}
@vskip 0pt plus 1 fill
Copyright @copyright{} 1996 Eric M. Ludlam
@end titlepage

@comment create a ClassWidget index
@defindex cw
@comment create a DataObject index
@defindex do

@node Top, , , (dir)Top
@comment  node-name,  next,  previous,  up

NOTE: dialog mode, despite it's coolness, has been overrun by the 
      custom/widget package and will not be heavilly support in the
      future unless there is some overwhelming need.

Dialog mode and its support files can create complex user interface
definitions which reside in simple emacs buffers as text.  These
interfaces can be controlled using the keyboard or mouse.

This package is dependent on eieio @xref{(eieio) Top} for structured
support of the widget definitions.  The object communication model used
by the dialog widgets is reminiscent of Fresco or it's predecessor,
Interviews.  Both defined widgets as objects, and the data they
controlled as specialized data-objects which maintain lists of viewers
which are told whenever there is a gui change.

This model permits the creation of complex dialogs with very little
hand-crafted glue on the part of the programmer.

@menu
* Introduction::        The visual and interactive aspects of dialog
* Usage::               How to use the widget controls
* Dialog Creation::     The dialog-mode library
* Widget Classes::      What basic widgets are available
* Data Object::         What is the data object, and why it is useful

* Debug Aids::          Functions to help you debug a gui
* Config Toolkit::      Make emacs configuration dialogs easily

* Index::
@end menu

@node Introduction, Usage, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Introduction
@cindex introduction

The dialog package uses eieio to define a hierarchy of widgets, and then
maintains them inside a buffer.  @dfn{dialog-mode} is used to maintain a
list of these widgets, and lets the user interact with them. @xref{Usage}

@cwindex widget-toplevel
A dialog is constructed on top of a special @code{widget-toplevel} which
contains all the sub-widgets, and permits the use of @kbd{tab} and
@kbd{M-tab} to navigate between them. Each widget built inside the
toplevel shell is then managed and positioned according to a geometry
management scheme. @xref{Geometry Management}

@doindex data-object
Each widget which displays or edits data uses a @code{data-object} for
that function.  A @code{data-object} maintains both the data being
edited, and a list of widgets which care about that data.  When a widget
or user edits the data maintained by the @code{data-object}, all widgets
in the list are notified so they can update their display. @xref{Data Object}

The @code{data-object} is what makes dialog mode most like the Fresco
or Interviews widget toolkit, and what makes toolkits of that type so
powerful.  In @dfn{dialog-mode} the data object is an eieio class, so
anyone can inherit from it, and take advantage of this power while
adding new functionality.

The @file{dlg-class.el} file is an excellent example of how an emacs
lisp symbol can be attached and maintained to the standard (and very
simple) @code{data-object} class. @xref{Config Toolkit}

Additional information on eieio: @xref{(eieio) Top}

@node Usage, Dialog Creation, Introduction, Top
@comment  node-name,  next,  previous,  up
@chapter Usage
@cindex Using dialog mode

  Each key sequence in a dialog falls under four categories.

@enumerate
@item
Pass-through keys are interpreted from the default global keymap.
@item
Pass-through-maybe keys are passed through to the default keymap only if
the widget the cursor is on does not want to use it
@item
Redirected keys are interpreted or ignored by the currently active
widget.
@item
Dialog keys have special meaning to a dialog box and used at that level.
@end enumerate


All @kbd{C-x}, @kbd{C-h}, and @kbd{C-c} sequences, are Pass-through keys,
in addition to any non-editing and non-movement commands.

All movement keys such as @code{C-f} or @code{[right]} are
Pass-through-maybe keys.  Usually the dialog will just let you move the
cursor about the screen.  Some widgets, however, require the use of
these keys for internal scrolling, or other activity.  In those cases,
the events are passed into requesting widgets. Currently, only the text
widget uses these keys.  In the future, other widgets may use these keys
instead. @xref{widget-text-field}

The keys @code{TAB} and @code{M-TAB} are dialog keys and are used to
jump from one widget to the next or previous logical widget.

All other keys classify as redirected keys, and are passed down to the
currently active widget. @xref{Widget Classes}

@node Dialog Creation, Widget Classes, Usage, Top
@comment  node-name,  next,  previous,  up
@chapter Dialog Creation
@cindex Creating Dialogs

There are two methods for building a dialog.  The first is to create the
dialog box directly, which is necessary if the dialog box is to have
specialized functionality.  The second is to use a dialog box toolkit,
such as the dlg-config emacs configuration tool.  @xref{Config Toolkit}

A toolkit can add additional widgets on the screen for control.  In this
chapter, we'll look at how to create a dialog box with the low level
commands.

@findex dialog-mode
The first thing that needs to be done is to create a
buffer. @xref{(elisp) Buffers} Once the buffer is created, make sure it
is writable using @dfn{toggle-read-only} (In case the buffer already
exists).  This is necessary because @dfn{dialog-mode} will write-protect
the buffer.  Once that is done, clear the buffer of its contents.
@refill

@cwindex widget-toplevel
Next, call @dfn{dialog-mode} with no parameters on the
buffer.  This will clear old references, setup the keymaps, and create
the @code{widget-toplevel} shell necessary for creating additional
widgets.

Once this is done, it's time to create the dialog box.  After creating
the dialog box, you need to call @dfn{dialog-refresh} to draw the
widgets to the display.

General commands to use for creating widgets:

@defun dialog-build-group widget-group forms

@cwindex widget-group
This will add all widgets created in @var{forms} as children of
@var{widget-group}.  @var{widget-group} must be a single form which
returns a widget object which inherits something from the
@code{widget-group} class.

If the return value from @var{widget-group} is a string, and not a
widget, then @dfn{dialog-build-group} assumes the programmer wanted a
simple frame, and the frame's label is assigned as the string.

Thus, the code segment

@example
  (dialog-build-group "Really do it"
     (create-widget "Yes" widget-push-button)
     (create-widget "No" widget-push-button))
@end example

will create a frame with ``Really do it'' as the label.

@end defun

@defun create-widget name class &rest { [parent] fields }

This will create and return a new object of type @var{class}.  This new
object will be printed as @var{name} (which can be a string or a
symbol).  The new object will be initialized with the values in
@var{fields} which are passed directly to the constructor.
@xref{(eieio) Making New Objects}

For backward compatibility, if the first member of @var{fields} is an
object, and inherits from @code{widget-group} @xref{widget-group}, then
this will be the parent widget, instead of the parent in the default
environment.  (created by @dfn{dialog-build-group}) If it does not meet
that criteria, then it is completely ignored, and that field will
instead be interpreted as a field tag.

This function will make sure that the object is added to the correct
parent's children list, and will run the method @dfn{verify} on the
newly created widget.  The @dfn{verify} method makes sure that all the
fields have been filled out correctly, or supplies defaults.

@end defun

@defun create-widget-parent name class parent &rest fields

This is just like @dfn{create-widget} except that @var{parent} is
required, not optional.

@end defun

@defun dialog-refresh

This is called with no parameters while @dfn{current-buffer} is the
buffer in which we have created a dialog box.  Calling this after
creating a dialog box will render that dialog box into the emacs buffer.

This can also be called while a dialog box is up to re-render all the
active objects.  (Though this is most likely not needed).

@end defun

@node Widget Classes, Data Object, Dialog Creation, Top
@comment  node-name,  next,  previous,  up
@chapter Widget Classes

The key to any dialog box is the widgets, and how they are organized.
This section will describe all the default widgets, their default
values, and their heuristic default values.  Fields which are used
internally will not be discussed, but their documentation can be
accessed using @dfn{describe-variable} and the class name.

For details about how to manage the geometry of a visible widgets
@menu
* Geometry Management ::
@end menu

Here are details for each widget type:
@c Include the entire widget tree menu, and descriptions of all the classes
@include d-widget.texi

@node Geometry Management, , Widget Classes, Widget Classes
@comment  node-name,  next,  previous,  up
@section Geometry Management
@cindex Geometry management

For all widgets of type @code{widget-visual} @xref{widget-visual} and
its children, managing the geometry of how widgets are created can be
complex.

The simplest geometry is to set the @code{:x} and @code{:y} fields to
real numbers greater than 0.  The widget will be placed at that
coordinate within the context of the parent.

If, however, you want to generalize your dialog box, there are ways to
do that as well.  If, for instance you add a new widget in front of
another, then you would have to change the coordinates for X and Y by
hand in the previous example.

To avoid this complication, relative numbers are permitted.  For both X
and Y, the following values are permissible:
@table @asis
@item @code{t}
This means use exactly the same value as the previous widget.  This
allows you to line up two widgets for either the horizontal or
vertical.  (It is usually not wise to use @code{t} for both X and Y.)
@item # < 0
If the number is less than 0, (Such as -1) this means offset this widget
by @code{(abs #)} in the positive direction.  The specified number
always takes box edges and margins into account.
@item (number)
If the number is a list, then the list is evaluated, and the number is
take verbatim.  Thus @code{(-1)} will really put the child widget offset
by 1 above the parent.  Frames do this to offset the label child into
the frame.
@item nil
For the first widget in a group, both @code{:x} and @code{:y} are 1.
When there is a previous widget, @code{:x} is assumed to be 1 , and
@code{:y} is assumed to be -1 if the current widget is the same as the
previous widget.  If the previous widget is a different class, then a -2
is assumed for @code{:y}
@end table

For instance, the code segment:
@example
(progn
  (switch-to-buffer (get-buffer-create "** doing"))
  (toggle-read-only -1)
  (dialog-mode)
  (dialog-build-group "My Group"
    (create-widget "Toggle Button 1" widget-toggle-button)
    (create-widget "Toggle Button 2" widget-toggle-button)
    (create-widget "Button 3" widget-push-button)
    (create-widget "Button 4" widget-push-button :x -2 :y t)
    (create-widget "Button 5" widget-push-button :x t :y -1))
  (dialog-refresh))
@end example

Will create a dialog box arranged like this:
@example
+--My Group---------------+
| [ ] Toggle Button 1     |
| [ ] Toggle Button 2     |
|                         |
|< Button 3 > < Button 4 >|
|             < Button 5 >|
+-------------------------+
@end example

@node Data Object, Debug Aids, Widget Classes, Top
@comment  node-name,  next,  previous,  up

The data object is one of the classes that makes the widget system
powerful.  Since all widgets adhere to using data objects for their
display and editing, the data object is then able to maintain links
between widgets when it is shared.

The data object does this by keeping a list of widgets which use it, and
when one widget modifies it, all the others are notified.  Some widgets
share these objects automatically.  For instance, the
@code{widget-radio-frame} will automatically share its state with its
children @code{widget-radio-buttons}.  @xref{widget-radio-frame}
@xref{widget-radio-button}.

In other cases, it is necessary to do this by hand, such as this
simplified example from @dfn{dialog-test}:
@example
  (let ((mytog (data-object "MyTog" :value t)))
   ...
    (dialog-build-group "Toggle Tests..."

      (create-widget "Togg" widget-toggle-button
		     :label-value "Toggle Me"
		     :state mytog)
      (create-widget "Forceon" widget-push-button
		     :x -6 :y t :label-value "Turn On"
		     :activate-hook 
		     (list 'lambda '(obj reason) "Flip Tog"
			   (list 'set-value mytog t)))
      (create-widget "Forceoff" widget-push-button
		     :x -6 :y t :label-value "Turn Off"
		     :activate-hook
		     (list 'lambda '(obj reason) "Flip Tog"
			   (list 'set-value mytog nil))))
      ...
   )
   ...
@end example

Here, @code{mytog} is a created @code{data-object} which is used as the
value to the toggle-button ``Togg''.  The pushbuttons ``Forceon'' and
``Forceoff'' both have activation hooks which set this value directly.
When the push-button is activated, the toggle button is automatically
updated because those widgets share that single object.

The reason the lambda expression is created using @code{list} is so
@code{mytogg} can be inserted directly into the expression.

@include d-dataobj.texi

@node  Debug Aids, Config Toolkit, Data Object, Top
@comment  node-name,  next,  previous,  up
@chapter Debug Aids
@cindex Debugging widgets

It can sometimes be confusing to understand why a dialog doesn't arrange
itself correctly sometimes.  There is a simple browser called
@dfn{dialog-widget-tree-primitive} which lists the stacking order.

For more complex problems when it would be convenient to browse inside
the widget classes, it is useful to use the tool in
@file{dialog-tree.el}.  It uses the tree library to provide a
widget-oriented tree of the dialog box (both visible and non-visual)
using the typical style of @dfn{tree-mode}. @xref{(eieio) Demo Programs}

Using @dfn{tree-mode}, simply click on the widget you are interested in
(or press @kbd{e}) to list all its slots, their values, and defaults.

@node Config Toolkit, Index, Debug Aids, Top
@comment  node-name,  next,  previous,  up
@chapter Config Toolkit
@cindex emacs configuration objects

The configuration toolkit is a supply of functions which use the dialog
widget set to create additional functionality specific to configuring
emacs variables and faces.

The configuration toolkit starts with the feature @code{dlg-config}.  A
config dialog is easier to start than building a dialog directly with
the dialog functions.

A config dialog starts on the premise that the dialog is dedicated to
editing emacs variables and X configuration items.  As such, all config
dialog boxes start with a small frame which permits the user to change
where configuration details are saved.  (Defaulting to @file{~/.emacs}
and @file{~/.Xdefaults}.  It also permits the user to not change the
environment, or not save the details into the startup files via toggle
buttons.

In addition, all dialogs end with a ``Done'' button.

@menu
* Starting Config ::    How to write a function to make a config dialog
* Special Classes ::    Special classes to help you edit variables
* Config Functions ::   Functions to help you bild config dialogs
* Config Examples::     Example dialog boxes
@end menu

@node Starting Config, Special Classes, , Config Toolkit
@comment  node-name,  next,  previous,  up
@section Starting Config
@cindex Config Toolkit startup

Building a configuration dialog starts with two simple functions:

@defun dlg-init &optional edit-style
This creates a buffer, and initializes @dfn{dialog-mode} in it.
@var{edit-style} can be @code{'dot-emacs}, @code{'xdefaults}, or left
off completely.  If ignored, the edit style defaults to including edit
lines for both @file{~/.emacs} and @file{~/.Xdefaults}.  When the users
changes either of these file pointers, it is changed for all future
configuration dialogs.

The line @code{(dlg-init 'dot-emacs)} results in:
@example
+---------------------------------------------Emacs Config Options--+
| Config File  : ~/.emacs                                           |
| [X] Modify running environment [ ] Auto Edit files [X] Show Edits |
+-------------------------------------------------------------------+
@end example
@end defun

@defun dlg-end
This functions creates a ``Done'' button at the end of the buffer, and
performs some simple clean up.
@end defun

@node Special Classes, Config Functions, Starting Config, Config Toolkit
@comment  node-name,  next,  previous,  up
@section Special Classes
@cindex config toolkit classes

What makes the configuration toolkit convenient to use are the
specialized data-objects.  Data objects are used by widgets to maintain
their values @xref{Data Object}.  This toolkit extends them so that
they will perform their old duties, in addition to automatically
updating the emacs environment, or automatically editing a configuration
file.

The available specialized data objects are:

@c include the specialized widget tree from this auto-generated sub-file.
@include d-config.texi

@node Config Functions, Config Examples, Special Classes, Config Toolkit
@comment  node-name,  next,  previous,  up
@section Config Functions
@cindex config toolkit utility functions

There are different utility functions for creating specialized widgets
for functionality used often when creating configuration dialogs.

@defun dlg-info-button description infopage helptext
This creates a label/button combination which knows how to jump to an
info page.  The label has the text from @var{description} in it.  The
button has the text ``Read Info'' on it.  When clicked, the button will
call @code{Info-goto-node} on @var{infopage}.  When help is requested of
the button, @var{helptext} will appear in the minibuffer.

It is often useful to put a link to an info page from a dialog editing
the configuration of a program.  The form of @var{infopage} is usually
@code{"(manual)Node"} where @var{manual} is the file name of the
package, like "emacs" and Node is the node (as defined with the @@node
command in texinfo) you wish to jump to.  See the documentation for the
function @code{Info-goto-node} for more details.
@end defun

@defun dlg-bunch-of-simple-toggles &rest toggle-data
This command takes a group of pairs of the form @var{label-value} 
@var{symbol}.  @var{label-value} represents the label of the created
toggle button.  @var{symbol} is the symbol to be edited.  The symbols
value will be edited using @code{data-object-symbol} for plain
variables, and @code{data-object-symbol-default} for variables that are
local in all buffers.  The code:

@example
   (dlg-bunch-of-simple-toggles
    "Display Line Number in Modeline" 'line-number-mode
    "Display Column Number in Modeline" 'column-number-mode)
@end example

would create two toggle buttons which edit the specified variables.

@end defun

There are some additional functions to help with face-editing with the
config toolkit:

@defun dlg-face-box face &optional bx by boxjust
This creates a frame for editing a single face @var{face}.  The frame is
under 40 columns wide, so two may fit easilly side-by-side.  Each frame
is typically 6 widget lines high, plus 2 for the frame.

@var{bx} is an optional argument to specify the X position of the
frame.  @var{by} does the same for the Y position @xref{Geometry Management}.
@var{boxjust} specifies how the frame's label is justified.

The code @code{(dlg-face-box 'region)} will look like this:
@example
@cartouche
+--Edit region----------------------+
|                                   |
|          ** Sample Text **        |
|                                   |
| Foreground: blue                  |
| Background: gray                  |
| [ ] Underline    <=> default      |
+-----------------------------------+
@end cartouche
@end example

Whenever the user edits the ``Foreground'' or ``Background'' fields, the
``Sample Text'' will automatically change to indicate the new colors.
The ``Underline'' toggle @xref{widget-toggle-button} will let the user
edit underlining. The option button ``<=> default''
@xref{widget-option-button} lets the user choose from a mouse-menu any
of ``default'', ``bold'', ``italic'', ``bold-italic''.  The font is
adjusted appropriately.

Edits to one of these boxes can modify the users @file{~/.Xdefaults}
file.
@end defun

@defun dlg-faces face-list
This function is a convenient wrapper around @dfn{dlg-face-box}.
@var{face-list} can specify a list of any number of faces, and this will
create the entire dialog box.
@end defun

Here is an example of @dfn{dlg-faces}:

@lisp
(defun econfig-info-faces ()
  "Edit list of faces associated with INFO"
  (interactive)
  (dlg-faces '(info-node info-xref)))
@end lisp

will create:

@example
@cartouche
+---------------------------------------------Emacs Config Options--+
| Xdefault File: ~/.Xdefaults                                       |
| [X] Modify running environment [ ] Auto Edit files [X] Show Edits |
+-------------------------------------------------------------------+
+-------------------Edit info-node--++--Edit info-xref-------------------+
|                                   ||                                   |
|          ** Sample Text **        ||          ** Sample Text **        |
|                                   ||                                   |
| Foreground:                       || Foreground:                       |
| Background:                       || Background:                       |
| [ ] Underline    <=> bold-italic  || [ ] Underline    <=> bold         |
+-----------------------------------++-----------------------------------+

< Done >
@end cartouche
@end example

@node Config Examples, , Config Functions, Config Toolkit
@comment  node-name,  next,  previous,  up
@section Config Examples
@cindex Config toolkit examples

Here is a simplified dialog box for editing a few variables for the
ps-print package:

@lisp
(defun econfig-ps-print ()
  "Creates a configure window with variables modifying variables
useful for ps-print."
  (interactive)
  (dlg-init 'dot-emacs)
  (require 'ps-print)
  (dialog-build-group "Postscript Printing Options"

    (create-widget "Print header on each page." widget-toggle-button
		   :state (data-object-symbol 'ps-print-header))
     
    (create-widget "Print gaudy frame around header." widget-toggle-button
		   :state (data-object-symbol 'ps-print-header-frame))
    
    (create-widget "Print with color." widget-toggle-button
		   :state (data-object-symbol 'ps-print-color-p))

    (create-widget "Printed Font Size:" widget-labeled-text
		   :unit "Pts" :text-length 5
		   :value (data-object-symbol-string-to-int 'ps-font-size))

    (create-widget "Print command    :" widget-labeled-text
		   :text-length 20
		   :value (data-object-symbol 'ps-lpr-command))
    )
  (dlg-end)
  (dialog-refresh)
  )
@end lisp

Notice each widget declares a special data-object @xref{data-object-symbol} 
to edit the actual variable in emacs' environment.  That same variable
will be modifed in the corresponding @file{~/.emacs} file.  Those object
will read the value from the environment to automatically set their
startup values.

The dialog box resulting looks like this:
@example
@cartouche
+---------------------------------------------Emacs Config Options--+
| Config File  : ~/.emacs                                           |
| [X] Modify running environment [ ] Auto Edit files [X] Show Edits |
+-------------------------------------------------------------------+
+--Postscript Printing Options-------------+
| [X] Print header on each page.           |
| [X] Print gaudy frame around header.     |
| [ ] Print with color.                    |
|                                          |
| Printed Font Size: 10    Pts             |
| Print command    : lpr                   |
+------------------------------------------+

< Done >
@end cartouche
@end example

Of course, it's possible to create more complex interactive dialogs as
well.  The function @dfn{econfig-mail} shows how to use translators to
make a label change value when a user types at a text field, or chooses
an option from an option button.


@node  Index, ,Config Toolkit, Top
@comment  node-name,  next,  previous,  up
@chapter Index

@menu
* Concept Index ::
* Widget Index ::
* Data Object Index ::
* Function Index ::
@end menu

@node Concept Index, Widget Index, Index, Index
@comment  node-name,  next,  previous,  up

@unnumbered Concept Index
@printindex cp

@node Widget Index, Data Object Index, Concept Index, Index
@comment  node-name,  next,  previous,  up

@unnumbered Widget Index
@printindex cw

@node Data Object Index, Function Index, Widget Index, Index
@comment  node-name,  next,  previous,  up

@unnumbered Data Object Index
@printindex do

@node Function Index, , Data Object Index, Index
@comment  node-name,  next,  previous,  up

@unnumbered Function Index
@printindex fn

@bye 
